{"version":3,"sources":["types/types.js","reducers/uiReducer.js","reducers/authReducer.js","reducers/userReducer.js","reducers/rootReducer.js","store/store.js","helpers/fetch.js","actions/auth.js","components/auth/LoginScreen.js","hooks/useForm.js","actions/ui.js","components/loading/LoadingScreen.js","actions/user.js","components/ui/Navbar.js","components/user/UserScreen.js","router/PrivateRoute.js","router/PublicRoute.js","router/AppRouter.js","UserApp.js","index.js"],"names":["types","initialState","validEmail","checking","rootReducer","combineReducers","ui","state","action","type","auth","payload","user","id","avatar","age","email","name","role","surname","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","baseUrl","process","fetchWithoutToken","endpoint","data","method","url","fetch","headers","body","JSON","stringify","fetchWithToken","token","localStorage","getItem","checkingFinished","login","logout","LoginScreen","dispatch","useDispatch","useSelector","useState","values","setValues","target","value","useForm","password","formValues","handleInputChange","className","onSubmit","e","preventDefault","a","resp","json","ok","setItem","Date","getTime","Swal","fire","startLogin","placeholder","onChange","onClick","validator","isEmail","LoadingScreen","userLoaded","Navbar","clear","UserScreen","useEffect","console","log","src","alt","PrivateRoute","isAuthenticated","Component","component","rest","props","to","PublicRoute","AppRouter","exact","path","UserApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ecd7762.chunk.js","sourcesContent":["\r\nexport const types = {\r\n\r\n    uiEmailVerified: '[ui] Email verified',\r\n    uiEmailNotVerified: '[ui] Email not verified',\r\n\r\n    authCheckingFinished: '[auth] Finished checking login state',\r\n    authStartLogin: '[auth] Start login',\r\n    authLogin: '[auth] Login',\r\n    authStartTokenRenew: '[auth] Start token renew',\r\n    authLogout: '[auth] Logout',\r\n\r\n    userLoaded: '[user] User loaded',\r\n    userLogout: '[user] User logout'\r\n\r\n}","import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    validEmail: false\r\n}\r\n\r\nexport const uiReducer = ( state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case types.uiEmailVerified:\r\n            return{\r\n                ...state,\r\n                validEmail: true\r\n            }\r\n\r\n            case types.uiEmailNotVerified:\r\n                return{\r\n                    ...state,\r\n                    validEmail: false\r\n                }\r\n            \r\n    \r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { types } from \"../types/types\";\r\n\r\nconst initialState = {\r\n    checking: true\r\n}\r\n\r\nexport const authReducer = ( state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        \r\n        case types.authLogin:\r\n            return{\r\n                ...state,\r\n                ...action.payload,\r\n                checking: false\r\n            }\r\n\r\n        case types.authCheckingFinished:\r\n            return{\r\n                ...state,\r\n                checking: false\r\n            }\r\n\r\n        case types.authLogout:\r\n            return{\r\n                checking: false\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { types } from \"../types/types\";\r\n\r\nconst initialState = {}\r\n\r\nexport const userReducer = ( state = initialState, action ) => {\r\n\r\n    switch (action.type) {\r\n        \r\n        case types.userLoaded:\r\n            return{\r\n                ...state,\r\n                id: action.payload.id,\r\n                avatar: action.payload.avatar,\r\n                age: action.payload.age,\r\n                email: action.payload.email,\r\n                name: action.payload.name,\r\n                role: action.payload.role,\r\n                surname: action.payload.surname\r\n            }\r\n\r\n        case types.userLogout:\r\n            return initialState;\r\n    \r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}","import { combineReducers } from 'redux';\r\nimport { uiReducer } from './uiReducer';\r\nimport { authReducer } from './authReducer';\r\nimport { userReducer } from './userReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    ui: uiReducer,\r\n    auth: authReducer,\r\n    user: userReducer\r\n});","/* Redux store configuration */\r\n\r\nimport { applyMiddleware, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\"; // For asynchronous actions\r\n\r\nimport { rootReducer } from \"../reducers/rootReducer\";\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(\r\n        applyMiddleware( thunk )\r\n    )\r\n);","const baseUrl = process.env.REACT_APP_API_URL; // .env file\r\n\r\nexport const fetchWithoutToken = ( endpoint, data, method = 'GET' ) => {\r\n\r\n    const url = `${baseUrl}/${endpoint}`;\r\n\r\n    if( method === 'GET' ) {\r\n        return fetch( url );\r\n    } else {\r\n        return fetch( url, {\r\n            method,\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify( data )\r\n        });\r\n    };\r\n\r\n};\r\n\r\nexport const fetchWithToken = ( endpoint, data, method = 'GET' ) => {\r\n\r\n    const url = `${baseUrl}/${endpoint}`;\r\n    const token = localStorage.getItem('token') || ''; // sets token variable with an empty string if JWT does not exist in local storage.\r\n\r\n    if( method === 'GET' ) {\r\n        return fetch( url, {\r\n            method,\r\n            headers: {\r\n                'x-token': token\r\n            }\r\n        } );\r\n    } else {\r\n        return fetch( url, {\r\n            method,\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'x-token': token\r\n            },\r\n            body: JSON.stringify( data )\r\n        } );\r\n    }\r\n\r\n\r\n}","import Swal from \"sweetalert2\";\r\n\r\nimport { fetchWithoutToken, fetchWithToken } from \"../helpers/fetch\"\r\nimport { types } from \"../types/types\";\r\n\r\n// Authenticates the user and saves JWT in local storage \r\n\r\nexport const startLogin = (email, password) => {\r\n    return async( dispatch ) => {\r\n\r\n        const resp = await fetchWithoutToken( 'authenticate', { email, password }, 'POST' );\r\n        const body = await resp.json();\r\n\r\n        if( body.ok ) {\r\n            localStorage.setItem('token', body.token);\r\n            localStorage.setItem('token-init-date', new Date().getTime() );\r\n\r\n            dispatch( login({\r\n                id: body.id,\r\n                name: body.name\r\n            }) );\r\n\r\n        } else {\r\n            Swal.fire('Error', 'Invalid email or password', 'error');\r\n        }\r\n    };\r\n};\r\n\r\n// Automatically logs in if the user is authenticated after refreshing. Also renews JWT\r\n\r\nexport const startChecking = () => {\r\n    return async(dispatch) => {\r\n\r\n        const resp = await fetchWithToken( 'renew' );\r\n        const body = await resp.json();\r\n\r\n        if( body.ok ) {\r\n            localStorage.setItem('token', body.token);\r\n            localStorage.setItem('token-init-date', new Date().getTime() );\r\n\r\n            dispatch( login({\r\n                id: body.id,\r\n                name: body.name\r\n            }) );\r\n\r\n        } else {\r\n            dispatch( checkingFinished() );\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n// contains the action for the authReducer\r\n \r\n\r\nconst checkingFinished = () => ({\r\n    type: types.authCheckingFinished\r\n});\r\n\r\n// contains the action for the authReducer\r\n \r\n\r\nconst login = ( user ) => ({\r\n    type: types.authLogin,\r\n    payload: user\r\n});\r\n\r\n\r\n // clears local storage and dispatches login action\r\n \r\n\r\nexport const startLogout = () => {\r\n    return ( dispatch ) => {\r\n\r\n        localStorage.clear();\r\n        dispatch( logout() );\r\n\r\n    }\r\n}\r\n\r\n\r\n// contains the action for the authReducer\r\n \r\n\r\nconst logout = () => ({\r\n    type: types.authLogout\r\n});\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Swal from 'sweetalert2';\r\nimport validator from 'validator';\r\n\r\n\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { startLogin } from '../../actions/auth';\r\nimport { emailVerified } from '../../actions/ui';\r\n\r\nimport '../../styles.css';\r\nimport './login.css';\r\n\r\nexport const LoginScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { validEmail } = useSelector(state => state.ui);\r\n\r\n    const [ formValues, handleInputChange ] = useForm({\r\n        email: '',\r\n        password: ''\r\n    });\r\n\r\n    const { email, password } = formValues;\r\n\r\n    /**@description Starts login process  when \"Login\" button is pressed */\r\n\r\n    const handleLogin = (e) => {\r\n        e.preventDefault();\r\n\r\n        dispatch( startLogin(email, password) );\r\n    }\r\n\r\n    /**@description Validates email when \"Next\" button is pressed */\r\n\r\n    const handleNext = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( validator.isEmail( email ) ){\r\n            dispatch( emailVerified() );\r\n        } else {\r\n            Swal.fire('Error', 'Please enter a valid email', 'error');\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"login-background\">\r\n            <div className=\"login-container\">\r\n                <div className=\"login-content\">\r\n                        <i className=\"fas fa-users\"></i>\r\n                        <h3 className=\"login-title\">Log in to your account</h3>\r\n                        <form onSubmit={ handleLogin }>\r\n                            <div>\r\n                                <input \r\n                                    type=\"text\"\r\n                                    placeholder=\"Email\"\r\n                                    className=\"login-input\"\r\n                                    name=\"email\"\r\n                                    value={ email }\r\n                                    onChange={ handleInputChange }\r\n                                />\r\n                            </div>\r\n                            {   ( validEmail ) && // Shows password input only when the email entered is valid\r\n                                <div>\r\n                                <input\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                    className=\"login-input animate__animated animate__fadeIn\"\r\n                                    name=\"password\"\r\n                                    value={ password }\r\n                                    onChange={ handleInputChange }\r\n                                />\r\n                            </div>\r\n                            }\r\n                            {   ( !validEmail ) && // Hides Next button when the email entered is valid\r\n                                <div>\r\n                                <input \r\n                                    type=\"button\"\r\n                                    value=\"Next\"\r\n                                    className=\"btn-login\" \r\n                                    onClick={ handleNext }\r\n                                />\r\n                                </div>\r\n                            }\r\n                            {   ( validEmail ) && // Shows Login button only when the email entered is valid\r\n                                <div>\r\n                                <input \r\n                                    type=\"submit\"\r\n                                    value=\"Login\"\r\n                                    className=\"btn-login animate__animated animate__fadeIn\"\r\n                                />\r\n                                </div>\r\n                            }\r\n                        </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useState } from 'react';\r\n\r\n\r\nexport const useForm = ( initialState = {} ) => {\r\n    \r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => {\r\n        setValues( initialState );\r\n    }\r\n\r\n\r\n    const handleInputChange = ({ target }) => {\r\n\r\n        setValues({\r\n            ...values,\r\n            [ target.name ]: target.value\r\n        });\r\n\r\n    }\r\n\r\n    return [ values, handleInputChange, reset ];\r\n\r\n}","import { types } from \"../types/types\";\r\n\r\n/**\r\n * @returns {object} - contains the action for the uiReducer\r\n */\r\n\r\nexport const emailVerified = () => ({\r\n    type: types.uiEmailVerified\r\n});\r\n\r\nexport const emailNotVerified = () => ({\r\n    type: types.uiEmailNotVerified\r\n});","import React from 'react';\r\n\r\nimport './loading.css';\r\n\r\nexport const LoadingScreen = () => {\r\n    return (\r\n        <div className=\"loading-background\">\r\n            <div className=\"loading-container\">\r\n                <i className=\"fab fa-optin-monster\"></i>\r\n                <p>Please Wait...</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { fetchWithToken } from \"../helpers/fetch\";\r\nimport { types } from \"../types/types\";\r\n\r\n\r\n/**@description Fetches user info */\r\n\r\nexport const userStartLoading = () => {\r\n    return async(dispatch) => {\r\n\r\n        try {\r\n\r\n            const resp = await fetchWithToken('users/me');\r\n            const body = await resp.json();\r\n\r\n            dispatch( userLoaded( body ) );\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * @param {user} - the user\r\n * @returns {object} - contains the action for the userReducer\r\n */\r\n\r\nconst userLoaded = (user) => ({\r\n        type: types.userLoaded,\r\n        payload: user\r\n});\r\n\r\n/**\r\n * @returns {object} - contains the action for the userReducer\r\n */\r\n\r\nexport const userLogout = () => ({\r\n    type: types.userLogout\r\n})\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { startLogout } from '../../actions/auth';\r\nimport { emailNotVerified } from '../../actions/ui';\r\nimport { userLogout } from '../../actions/user';\r\n\r\n/* Boostrap used for NavBar styles */\r\n\r\nexport const Navbar = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { name } = useSelector(state => state.auth);\r\n\r\n    const handleLogout = () => {\r\n        dispatch( startLogout() );\r\n        dispatch( userLogout() );\r\n        dispatch( emailNotVerified() );\r\n    }\r\n\r\n    return (\r\n        <div className=\"navbar navbar-dark bg-dark mb-4\">\r\n            <span className=\"navbar-brand\">\r\n                { name }\r\n            </span>\r\n\r\n            <button \r\n                className=\"btn btn-outline-danger\"\r\n                onClick={ handleLogout }    \r\n            >\r\n                <i className=\"fas fa-sign-out-alt\"></i>\r\n                <span> Logout</span>\r\n            </button>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { userStartLoading } from '../../actions/user';\r\n\r\nimport { Navbar } from '../ui/Navbar';\r\n\r\nimport '../../styles.css';\r\nimport './user.css';\r\n\r\nexport const UserScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { id, avatar, age, email, name, role, surname  } = useSelector(state => state.user)\r\n    \r\n    useEffect(() => {\r\n\r\n        dispatch( userStartLoading() ); \r\n        \r\n    }, [dispatch])\r\n    \r\n    \r\n\r\n    return (\r\n        <div className=\"user-background\">\r\n            <Navbar />\r\n\r\n                <div className=\"user-container\">\r\n                    <img\r\n                        className=\"user-avatar\"\r\n                        src={ avatar } \r\n                        alt=\"avatar\"\r\n                    />\r\n\r\n                    <div className=\"content\">\r\n                        <span>User ID</span>\r\n                        <p>{id} </p>\r\n                        <hr/>\r\n                        <span>Name</span>\r\n                        <p>{ name } { surname } </p>\r\n                        <hr/>\r\n                        <span>Email</span>\r\n                        <p>{ email } </p>\r\n                        <hr/>\r\n                        <span>Age</span>\r\n                        <p>{ age } </p>\r\n                        <hr/>\r\n                        <span>Role</span>\r\n                        <p>{ role } </p>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\nexport const PrivateRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n\r\n    return (\r\n        <Route {...rest}\r\n            component={ (props) => (\r\n            ( isAuthenticated )\r\n                ? (<Component { ...props } />)\r\n                : ( <Redirect to=\"/login\" /> )\r\n        )}\r\n\r\n        />\r\n    )\r\n}\r\n\r\nPrivateRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\nexport const PublicRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route {...rest}\r\n            component={ (props) => (\r\n            ( isAuthenticated )\r\n                ? ( <Redirect to=\"/user-info\" /> )\r\n                : (<Component { ...props } />)\r\n        )}\r\n\r\n        />\r\n    )\r\n}\r\n\r\nPublicRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport { startChecking } from '../actions/auth';\r\n\r\nimport { LoginScreen } from '../components/auth/LoginScreen';\r\nimport { LoadingScreen } from '../components/loading/LoadingScreen';\r\nimport { UserScreen } from '../components/user/UserScreen';\r\nimport { PrivateRoute } from './PrivateRoute';\r\nimport { PublicRoute } from './PublicRoute';\r\n\r\nexport const AppRouter = () => {\r\n    \r\n    const dispatch = useDispatch();\r\n    const { checking, id } = useSelector(state => state.auth);\r\n\r\n    useEffect(() => {\r\n        \r\n        dispatch( startChecking() ); \r\n\r\n    }, [dispatch]);\r\n\r\n    if( checking ){\r\n        return <LoadingScreen />\r\n    }\r\n\r\n    return (\r\n            <Router>\r\n                <div>\r\n                    <Switch>\r\n                        <PublicRoute \r\n                            exact\r\n                            path=\"/login\"\r\n                            component={ LoginScreen }\r\n                            isAuthenticated= { !!id }  // True if the user is authenticated, false if not.\r\n                        />\r\n\r\n                        <PrivateRoute \r\n                            exact\r\n                            path=\"/user-info\"\r\n                            component={ UserScreen }\r\n                            isAuthenticated= { !!id } // True if the user is authenticated, false if not.\r\n                        />\r\n\r\n                        <Redirect to=\"/login\"/>\r\n\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { store } from './store/store';\r\nimport { AppRouter } from './router/AppRouter';\r\n\r\nexport const UserApp = () => {\r\n    return (\r\n        <Provider store={ store }>\r\n            <AppRouter />\r\n        </Provider>\r\n        \r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { UserApp } from './UserApp';\r\n\r\nReactDOM.render(\r\n    <UserApp />,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}